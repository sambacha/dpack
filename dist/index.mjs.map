{"version":3,"file":"index.mjs","sources":["../src/util.ts","../src/ipfs-util.ts","../src/schema.ts","../src/pure.ts","../src/builder.ts","../src/dapp.ts","../index.ts"],"sourcesContent":["const v8 = require('v8')\n\n/**\n * @exports copy\n * @param a\n * @returns\n */\n\nexport function copy (a: any): any {\n  return v8.deserialize(v8.serialize(a))\n//  return JSON.parse(JSON.stringify(a))\n}\n\n/**\n * @exports need\n * @param b\n * @param s\n */\n\nexport function need (b: any, s: string): void {\n  if (!b != null && !s) throw new Error(s)\n  console.error('ERROR: need, b, s)`')\n}\n\n/**\n * omap - map over an object, returning a new object\n * @exports omap\n * @param {Object} obj\n * @param {Function} keyMapFunction - Transform operation to apply on the key.\n * @param {Function} [valueMapFunction] - Transform operation to apply on the value.\n * @returns {Object} out\n */\n\nexport function omap<K extends string, T, M> (x: { [P in K]: T }, f: (t: T) => M): { [P in K]: M } {\n  const out: { [P in K]: M } = {} as any\n  for (const k of Object.keys(x)) {\n    out[k as K] = f(x[k as K])\n  }\n  return out\n};\n","const debug = require('debug')('dpack')\n\nconst IPFS = require('ipfs-http-client')\n\nconst nodeAddress = process.env.IPFS_RPC_URL ?? '/ip4/127.0.0.1/tcp/5001'\ndebug(`starting node ${nodeAddress}`)\nconst node = IPFS.create(nodeAddress)\ndebug('started node')\n\nexport async function getIpfsJson (cid: string): Promise<any> {\n  if (isV0CID(cid)) {\n    console.log(`\nWARN: Detected a V0 CID string. This warning will become an error very soon.\nPlease repack the pack containing ${cid}\n`)\n  }\n  const blob = await node.cat(cid)\n  let s = ''\n  \n  for await (const chunk of blob) {\n    s += chunk\n  }\n  return JSON.parse(s)\n}\n\nexport async function putIpfsJson (obj: any, pin: boolean = false): Promise<string> {\n  const str = JSON.stringify(obj)\n  debug(`adding ${str}`)\n  const { cid } = await node.add(str, { cidVersion: 1, pin: pin })\n  debug(`added ${str}`)\n  debug(`put ${cid}`)\n  return cid.toString()\n}\n\nexport async function pinIpfsCid (cid: string): Promise<void> {\n  if (isV0CID(cid)) {\n    console.warn(`\nWARN: Detected a V0 CID string. This warning will become an error very soon.\nPlease repack the pack containing ${cid}\n`)\n  }\n  await node.pin.add(cid)\n  debug(`pinned ${cid}`)\n}\n\n/**\n *\n * @function isV0CID\n * @param cidStr\n * @returns boolean\n * @summary 'If a CID is 46 characters starting with \"Qm\", it's a CIDv0'\n * @see {@link  https://docs.ipfs.io/concepts/content-addressing/#identifier-formats}\n */\nexport function isV0CID (cidStr: string): boolean {\n  return (cidStr.length === 46 && cidStr.slice(0, 2) === 'Qm')\n}\n\n/**\n * @function isCid\n * @param cidStr\n * @returns boolean\n */\nexport function isCid (cidStr: string): boolean {\n  try {\n    IPFS.CID.parse(cidStr)\n    return true\n  } catch {\n    return false\n  }\n}\n","import Ajv from 'ajv' // = require('ajv/dist/jtd')\nconst ajv = new Ajv()\n\nconst linkSchema = {\n  properties: {\n    '/': { type: 'string' }\n  }\n}\n\nconst typeSchema = {\n  properties: {\n    typename: { type: 'string' },\n    artifact: { ref: 'linkSchema' }\n  },\n  definitions: {\n    linkSchema\n  }\n}\n\nconst objectSchema = {\n  properties: {\n    objectname: { type: 'string' },\n    address: { type: 'string' },\n    typename: { type: 'string' },\n    artifact: { ref: 'linkSchema' }\n  },\n  definitions: {\n    linkSchema\n  }\n}\n\nconst packSchema = {\n  properties: {\n    format: { type: 'string' },\n    network: { type: 'string' },\n    types: { values: { ref: 'typeSchema' } },\n    objects: { values: { ref: 'objectSchema' } }\n  },\n  definitions: {\n    typeSchema,\n    objectSchema\n  }\n}\n\nconst bundleSchema = {\n  values: { type: 'string' }\n}\n\nconst artifactSchema = {\n  bytecode: { nullable: true },\n  abi: { nullable: true },\n  additionalProperties: true\n}\n\nconst resolvedPackSchema = {\n  properties: {\n    format: { type: 'string' },\n    network: { type: 'string' },\n    types: { values: { ref: 'typeSchema' } },\n    objects: { values: { ref: 'objectSchema' } },\n    _bundle: { ref: 'bundleSchema' }\n  },\n  definitions: {\n    typeSchema,\n    objectSchema,\n    bundleSchema\n  }\n}\n\n/**\n * @export const isWellFormedLink\n * @export const isWellFormedObject\n * @export const isWellFormedType\n * @export const isWellFormedPack\n * @export const isWellFormedArtifact\n * @export const isWellFormedResolvedPack\n * @export const isWellFormedBundle\n * @export const isWellFormedArtifact\n * @export const isWellFormedArtifact\n */\nexport const isWellFormedLink = ajv.compile(linkSchema)\nexport const isWellFormedObject = ajv.compile(objectSchema)\nexport const isWellFormedType = ajv.compile(typeSchema)\nexport const isWellFormedPack = ajv.compile(packSchema)\nexport const isWellFormedBundle = ajv.compile(bundleSchema)\nexport const isWellFormedArtifact = ajv.compile(artifactSchema)\nexport const isWellFormedResolvedPack = ajv.compile(resolvedPackSchema)\n","import { copy, need, omap } from './util'\nimport { Artifact, TypeInfo, ObjectInfo, DPack, ResolvedPack } from './types'\nimport * as schema from './schema'\n\nexport { schema }\n\nexport function assertValidPack (p: DPack): void {\n  need(schema.isWellFormedPack(p),\n    `dpack.assertValidPack(): pack fails schema validation: ${schema.isWellFormedPack.errors}`\n  )\n  need(p.network != '', 'dpack.assertValidPack() - \\'network\\' field cannot be empty')\n  need(p.format === 'dpack-1',\n    `dpack.assertValidPack() - unrecognized 'format' field: ${p.format}`\n  )\n  omap(p.objects, (o: ObjectInfo) => { assertValidObject(o); return o })\n  omap(p.types, (t: TypeInfo) => { assertValidType(t); return t })\n}\n\nexport function assertValidType (t: TypeInfo): void {\n  need(schema.isWellFormedType(t),\n    `dpack.assertValidType() - not well formed type: ${t}`\n  )\n}\n\nexport function assertValidObject (o: ObjectInfo): void {\n  need(schema.isWellFormedObject(o),\n    `dpack.assertValidObject() - not well formed object: ${o}`\n  )\n}\n\nexport function assertValidArtifact (a: Artifact): void {\n  need(schema.isWellFormedArtifact(a),\n    `dpack.assertValidArtifact() - not well formed artifact: ${a}`\n  )\n}\n\nexport function addType (pack: DPack, type: TypeInfo): DPack {\n  assertValidPack(pack)\n  assertValidType(type)\n  need(!(pack.types[type.typename]),\n    `dpack.addType() - typename already exists: ${type.typename}`\n  )\n  const out = copy(pack)\n  out.types[type.typename] = type\n  assertValidPack(out)\n  return out\n}\n\nexport function addObject (pack: DPack, obj: any): DPack {\n  assertValidPack(pack)\n  assertValidObject(obj)\n  need(!(pack.objects[obj.objectname]),\n    `dpack.addObject() - objectname already exists: ${obj.objectname}`\n  )\n  const out = copy(pack)\n  out.objects[obj.objectname] = obj\n  assertValidPack(pack)\n  return out\n}\n\nexport function merge (...packs: DPack[]): DPack {\n  const head = packs[0]\n  const rest = packs.slice(1)\n  packs.map((p) => {\n    assertValidPack(p)\n    need(p.format === head.format,\n      'dpack.merge() - two packs have different \\'format\\' fields'\n    )\n    need(p.network === head.network,\n      'dpack.merge() - two packs have different \\'network\\' fields'\n    )\n  })\n  let out = copy(head)\n  for (const pack of rest) {\n    for (const tkey of Object.keys(pack.types)) {\n      out = addType(out, pack.types[tkey])\n    }\n    for (const okey of Object.keys(pack.objects)) {\n      out = addObject(out, pack.objects[okey])\n    }\n  }\n  assertValidPack(out)\n  return out\n}\n\nexport function blank (network: string): DPack {\n  const pack = {\n    format: 'dpack-1',\n    network: network,\n    types: {},\n    objects: {}\n  }\n  assertValidPack(pack)\n  return pack\n}\n\nexport async function resolve (this: any, pack: DPack, ipfs: any = undefined): Promise<ResolvedPack> {\n  async function _resolve (link: { [x: string]: any }): Promise<any> {\n    need(link, 'panic: bad DAG-JSON link')\n    need(link['/'], 'panic: bad DAG-JSON link')\n    return await ipfs.getIpfsJson(link['/'])\n  }\n  assertValidPack(pack)\n  const out = copy(pack)\n  out._bundle = {}\n  for (const key of Object.keys(this.types)) {\n    out._bundle[key] = await _resolve(this.types[key].artifact)\n  }\n  for (const key of Object.keys(this.objects)) {\n    out._bundle[key] = await _resolve(this.objects[key].artifact)\n  }\n  return await Promise.resolve(out)\n}\n\nexport function fromObject (obj: any): DPack {\n  assertValidPack(obj)\n  return obj as DPack\n}\n","import { DPack } from './types'\nimport { need, copy } from './util'\nimport { putIpfsJson } from './ipfs-util'\nimport {\n  blank,\n  merge as _merge,\n  addType as _addType,\n  addObject as _addObject,\n  assertValidPack\n} from './pure'\n\nconst debug = require('debug')('DPack:builder')\n\nexport class PackBuilder {\n  _pack: DPack\n  constructor (network: string) {\n    need(network, 'new PackBuilder(network) - network must be defined')\n    debug(`#[debug] new PackBuilder(${network})`)\n    need(typeof (network) === 'string', 'new PackBuilder(network) - network must be a string')\n    need(network !== 'mainnet', 'You may not use \\'mainnet\\' as a network name. You might mean \\'ethereum\\'.')\n    need(network !== '', 'Network name cannot be empty.')\n    this._pack = blank(network)\n    assertValidPack(this._pack)\n  }\n\n  async packType (t: any): Promise<PackBuilder> {\n    const cid = (await putIpfsJson(t.artifact)).toString()\n    const info = copy(t)\n    info.artifact = { '/': cid }\n    this._pack = _addType(this._pack, info)\n    return await Promise.resolve(this)\n  }\n\n  addType (t: any): PackBuilder {\n    this._pack = _addType(this._pack, t)\n    return this\n  }\n\n  async packObject (o: any, alsoPackType: boolean = true): Promise<PackBuilder> {\n    const cid = (await putIpfsJson(o.artifact)).toString()\n    const info = copy(o)\n    info.artifact = { '/': cid }\n\n    let pack = _addObject(this._pack, info)\n    if (alsoPackType) {\n      pack = _addType(pack, {\n        typename: info.typename,\n        artifact: info.artifact\n      })\n    }\n    this._pack = pack\n    return await Promise.resolve(this)\n  }\n\n  addObject (o: any): PackBuilder {\n    this._pack = _addObject(this._pack, o)\n    return this\n  }\n\n  merge (...packs: DPack[]): PackBuilder {\n    this._pack = _merge(this._pack, ...packs)\n    return this\n  }\n\n  build (): any {\n    assertValidPack(this._pack)\n    return copy(this._pack)\n  }\n};\n","import { need } from './util'\nimport { getIpfsJson } from './ipfs-util'\nimport default_ethers from 'ethers'\n\nconst debug = require('debug')('dpack')\n\nexport class Dapp {\n  _ethers: any\n  _pack: any\n  _objects: any\n  _types: any\n  weth: any\n\n  private constructor () {}\n  static async loadFromPack (pack: any, _ethers: any = undefined, _signer: any = undefined): Promise<Dapp> {\n    const dapp = new Dapp()\n\n    dapp._objects = {}\n    dapp._types = {}\n    dapp._pack = pack\n    dapp._ethers = _ethers ?? default_ethers\n    const signer = _signer ?? dapp._ethers.Wallet.createRandom()\n\n    for (const key of Object.keys(dapp._pack.objects)) {\n      const obj = dapp._pack.objects[key]\n      const cid = obj.artifact['/']\n      const artifact = await getIpfsJson(cid)\n      const abi = artifact.abi\n      const addr = obj.address\n      const instance = new dapp._ethers.Contract(addr, abi, signer)\n      instance.objectname = obj.objectname\n      // instance.address already exists\n      instance.typename = obj.typename\n      instance.artifact = obj.artifact\n      dapp._objects[key] = instance\n      // type key = /*unresolved*/ any\n      need(dapp as unknown as [typeof key] === undefined, 'Panic: name collision on dapp object.')\n\n      debug('#[debug] dapp._objects[key] = instance')\n      dapp as unknown as [typeof key]; instance\n    }\n\n    for (const key of Object.keys(dapp._pack.types)) {\n      const typ = dapp._pack.types[key]\n      const cid = typ.artifact['/']\n      const artifact = await getIpfsJson(cid)\n      const abi = artifact.abi\n      const code = artifact.bytecode\n      let deployer = new dapp._ethers.ContractFactory(abi, code)\n      deployer = deployer.connect(signer)\n      deployer.typename = typ.typename\n      deployer.artifact = typ.artifact\n      dapp._types[key] = deployer\n    }\n\n    return dapp\n  }\n}\n","/**\n * @package dpack\n * @description A package for deploying smart contracts.\n * @author nikolai mushegia\n * @see {@link https://github.com/dapphub/dpack}\n */\n\nimport { PackBuilder } from './src/builder'\nimport { Dapp } from './src/dapp'\nimport { getIpfsJson, putIpfsJson, isCid } from './src/ipfs-util'\nimport { need } from './src/util'\nimport * as IpfsUtil from './src/ipfs-util'\n\nimport * as Builder from './src/builder';\nimport * as Pure from './src/pure';\nimport * as Schema from './src/schema';\nimport * as Types from './src/types';\nimport * as Util from './src/util';\n\nexport const load = async (arg: string, _ethers = undefined, _signer = undefined) => {\n  if (typeof arg === 'string') {\n    arg = (isCid(arg)) ? await getIpfsJson(arg) : require(arg)\n  }\n  need(typeof arg === 'object' && Object.keys(arg).length, 'Could not find a pack from provided source.')\n  return await Dapp.loadFromPack(arg, _ethers, _signer)\n}\n\nexport const builder = (network: string) => new PackBuilder(network)\n\nexport { PackBuilder, Dapp, getIpfsJson, putIpfsJson, IpfsUtil, isCid, Builder, Pure, Schema, Types, Util };\n"],"names":["debug","schema.isWellFormedPack","schema.isWellFormedType","schema.isWellFormedObject","schema.isWellFormedArtifact","_addType","_addObject","_merge"],"mappings":"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"}